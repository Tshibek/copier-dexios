
#!/usr/bin/env bash

### Create a database backup.
###
### Usage:
###     $ docker compose -f <environment>.yml (exec |run --rm) postgres backup

set -o errexit
set -o pipefail
set -o nounset

# Constants
readonly RESTRICTED_USER="postgres"
readonly TIMESTAMP_FORMAT='%Y_%m_%dT%H_%M_%S'

# Source required files
working_dir="$(dirname ${0})"
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

validate_database_user() {
    if [[ "${POSTGRES_USER}" == "${RESTRICTED_USER}" ]]; then
        message_error "Backing up as '${RESTRICTED_USER}' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
        exit 1
    fi
}

setup_postgres_env() {
    export PGHOST="${POSTGRES_HOST}"
    export PGPORT="${POSTGRES_PORT}"
    export PGUSER="${POSTGRES_USER}"
    export PGPASSWORD="${POSTGRES_PASSWORD}"
    export PGDATABASE="${POSTGRES_DB}"
}

create_backup() {
    local timestamp
    timestamp=$(date +"${TIMESTAMP_FORMAT}")
    local backup_filename="${BACKUP_FILE_PREFIX}_${timestamp}.sql.gz"
    
    pg_dump | gzip > "${BACKUP_DIR_PATH}/${backup_filename}"
    
    message_success "'${POSTGRES_DB}' database backup '${backup_filename}' has been created and placed in '${BACKUP_DIR_PATH}'."
}

main() {
    message_welcome "Backing up the '${POSTGRES_DB}' database..."
    validate_database_user
    setup_postgres_env
    create_backup
}

main